diff -uprN -X mkfile apps.orig/openssl/apps.c apps/openssl/apps.c
--- apps.orig/openssl/apps.c	Sun May 31 21:08:21 2020
+++ apps/openssl/apps.c	Sun May 31 19:27:30 2020
@@ -146,6 +146,7 @@
 #include <openssl/x509v3.h>
 
 #include <openssl/rsa.h>
+#include <openssl/asn1t.h>
 
 typedef struct {
 	const char *name;
diff -uprN -X mkfile apps.orig/openssl/ciphers.c apps/openssl/ciphers.c
--- apps.orig/openssl/ciphers.c	Sun May 31 21:08:21 2020
+++ apps/openssl/ciphers.c	Sun May 31 19:27:30 2020
@@ -49,14 +49,18 @@ static const struct option ciphers_optio
 		.name = "v",
 		.desc = "Provide cipher listing",
 		.type = OPTION_VALUE,
-		.opt.value = &ciphers_config.verbose,
+		.opt = {
+			.value = &ciphers_config.verbose,
+		},
 		.value = 1,
 	},
 	{
 		.name = "V",
 		.desc = "Provide cipher listing with cipher suite values",
 		.type = OPTION_VALUE,
-		.opt.value = &ciphers_config.verbose,
+		.opt = {
+			.value = &ciphers_config.verbose,
+		},
 		.value = 2,
 	},
 	{ NULL },
diff -uprN -X mkfile apps.orig/openssl/cms.c apps/openssl/cms.c
--- apps.orig/openssl/cms.c	Sun May 31 21:08:21 2020
+++ apps/openssl/cms.c	Sun May 31 19:27:30 2020
@@ -834,7 +834,7 @@ cms_main(int argc, char **argv)
 			secret_keyid = NULL;
 		}
 		if (pwri_pass) {
-			pwri_tmp = strdup(pwri_pass);
+			pwri_tmp = (unsigned char*)strdup((char*)pwri_pass);
 			if (!pwri_tmp)
 				goto end;
 			if (!CMS_add0_recipient_password(cms, -1, NID_undef,
diff -uprN -X mkfile apps.orig/openssl/dgst.c apps/openssl/dgst.c
--- apps.orig/openssl/dgst.c	Sun May 31 21:08:21 2020
+++ apps/openssl/dgst.c	Sun May 31 19:27:30 2020
@@ -175,14 +175,18 @@ static const struct option dgst_options[
 		.name = "binary",
 		.desc = "Output the digest or signature in binary form",
 		.type = OPTION_VALUE,
-		.opt.value = &dgst_config.out_bin,
+		.opt = {
+			.value = &dgst_config.out_bin,
+		},
 		.value = 1,
 	},
 	{
 		.name = "c",
 		.desc = "Print the digest in two-digit groups separated by colons",
 		.type = OPTION_VALUE,
-		.opt.value = &dgst_config.separator,
+		.opt = {
+			.value = &dgst_config.separator,
+		},
 		.value = 1,
 	},
 	{
@@ -251,7 +255,9 @@ static const struct option dgst_options[
 		.name = "r",
 		.desc = "Output the digest in coreutils format",
 		.type = OPTION_VALUE,
-		.opt.value = &dgst_config.separator,
+		.opt = {
+			.value = &dgst_config.separator,
+		},
 		.value = 2,
 	},
 	{
diff -uprN -X mkfile apps.orig/openssl/dhparam.c apps/openssl/dhparam.c
--- apps.orig/openssl/dhparam.c	Sun May 31 21:08:21 2020
+++ apps/openssl/dhparam.c	Sun May 31 19:27:30 2020
@@ -150,14 +150,18 @@ static const struct option dhparam_optio
 		.desc = "Generate DH parameters with a generator value of 2 "
 		    "(default)",
 		.type = OPTION_VALUE,
-		.opt.value = &dhparam_config.g,
+		.opt = {
+			.value = &dhparam_config.g,
+		},
 		.value = 2,
 	},
 	{
 		.name = "5",
 		.desc = "Generate DH parameters with a generator value of 5",
 		.type = OPTION_VALUE,
-		.opt.value = &dhparam_config.g,
+		.opt = {
+			.value = &dhparam_config.g,
+		},
 		.value = 5,
 	},
 	{
diff -uprN -X mkfile apps.orig/openssl/enc.c apps/openssl/enc.c
--- apps.orig/openssl/enc.c	Sun May 31 21:08:21 2020
+++ apps/openssl/enc.c	Sun May 31 19:27:30 2020
@@ -153,7 +153,9 @@ static const struct option enc_options[]
 		.name = "d",
 		.desc = "Decrypt the input data",
 		.type = OPTION_VALUE,
-		.opt.value = &enc_config.enc,
+		.opt = {
+			.value = &enc_config.enc,
+		},
 		.value = 0,
 	},
 	{
@@ -166,7 +168,9 @@ static const struct option enc_options[]
 		.name = "e",
 		.desc = "Encrypt the input data (default)",
 		.type = OPTION_VALUE,
-		.opt.value = &enc_config.enc,
+		.opt = {
+			.value = &enc_config.enc,
+		},
 		.value = 1,
 	},
 	{
@@ -229,7 +233,9 @@ static const struct option enc_options[]
 	{
 		.name = "nosalt",
 		.type = OPTION_VALUE,
-		.opt.value = &enc_config.nosalt,
+		.opt = {
+			.value = &enc_config.nosalt,
+		},
 		.value = 1,
 	},
 	{
@@ -244,14 +250,18 @@ static const struct option enc_options[]
 		.desc = "Print out the salt, key and IV used, then exit\n"
 		    "  (no encryption or decryption is performed)",
 		.type = OPTION_VALUE,
-		.opt.value = &enc_config.printkey,
+		.opt = {
+			.value = &enc_config.printkey,
+		},
 		.value = 2,
 	},
 	{
 		.name = "p",
 		.desc = "Print out the salt, key and IV used",
 		.type = OPTION_VALUE,
-		.opt.value = &enc_config.printkey,
+		.opt = {
+			.value = &enc_config.printkey,
+		},
 		.value = 1,
 	},
 	{
diff -uprN -X mkfile apps.orig/openssl/pkcs12.c apps/openssl/pkcs12.c
--- apps.orig/openssl/pkcs12.c	Sun May 31 21:08:21 2020
+++ apps/openssl/pkcs12.c	Sun May 31 19:27:31 2020
@@ -269,7 +269,9 @@ static const struct option pkcs12_option
 		.name = "cacerts",
 		.desc = "Only output CA certificates",
 		.type = OPTION_VALUE_OR,
-		.opt.value = &pkcs12_config.options,
+		.opt = {
+			.value = &pkcs12_config.options,
+		},
 		.value = CACERTS,
 	},
 	{
@@ -317,7 +319,9 @@ static const struct option pkcs12_option
 		.name = "clcerts",
 		.desc = "Only output client certificates",
 		.type = OPTION_VALUE_OR,
-		.opt.value = &pkcs12_config.options,
+		.opt = {
+			.value = &pkcs12_config.options,
+		},
 		.value = CLCERTS,
 	},
 	{
@@ -331,7 +335,9 @@ static const struct option pkcs12_option
 		.name = "descert",
 		.desc = "Encrypt PKCS#12 certificates with triple DES (default RC2-40)",
 		.type = OPTION_VALUE,
-		.opt.value = &pkcs12_config.cert_pbe,
+		.opt = {
+			.value = &pkcs12_config.cert_pbe,
+		},
 		.value = NID_pbe_WithSHA1And3_Key_TripleDES_CBC,
 	},
 	{
@@ -351,7 +357,9 @@ static const struct option pkcs12_option
 		.name = "info",
 		.desc = "Give info about PKCS#12 structure",
 		.type = OPTION_VALUE_OR,
-		.opt.value = &pkcs12_config.options,
+		.opt = {
+			.value = &pkcs12_config.options,
+		},
 		.value = INFO,
 	},
 	{
@@ -365,7 +373,9 @@ static const struct option pkcs12_option
 		.name = "keyex",
 		.desc = "Set MS key exchange type",
 		.type = OPTION_VALUE,
-		.opt.value = &pkcs12_config.keytype,
+		.opt = {
+			.value = &pkcs12_config.keytype,
+		},
 		.value = KEY_EX,
 	},
 	{
@@ -379,7 +389,9 @@ static const struct option pkcs12_option
 		.name = "keysig",
 		.desc = "Set MS key signature type",
 		.type = OPTION_VALUE,
-		.opt.value = &pkcs12_config.keytype,
+		.opt = {
+			.value = &pkcs12_config.keytype,
+		},
 		.value = KEY_SIG,
 	},
 	{
@@ -399,7 +411,9 @@ static const struct option pkcs12_option
 		.name = "maciter",
 		.desc = "Use MAC iteration",
 		.type = OPTION_VALUE,
-		.opt.value = &pkcs12_config.maciter,
+		.opt = {
+			.value = &pkcs12_config.maciter,
+		},
 		.value = PKCS12_DEFAULT_ITER,
 	},
 	{
@@ -413,7 +427,9 @@ static const struct option pkcs12_option
 		.name = "nocerts",
 		.desc = "Don't output certificates",
 		.type = OPTION_VALUE_OR,
-		.opt.value = &pkcs12_config.options,
+		.opt = {
+			.value = &pkcs12_config.options,
+		},
 		.value = NOCERTS,
 	},
 	{
@@ -426,28 +442,36 @@ static const struct option pkcs12_option
 		.name = "noiter",
 		.desc = "Don't use encryption iteration",
 		.type = OPTION_VALUE,
-		.opt.value = &pkcs12_config.iter,
+		.opt = {
+			.value = &pkcs12_config.iter,
+		},
 		.value = 1,
 	},
 	{
 		.name = "nokeys",
 		.desc = "Don't output private keys",
 		.type = OPTION_VALUE_OR,
-		.opt.value = &pkcs12_config.options,
+		.opt = {
+			.value = &pkcs12_config.options,
+		},
 		.value = NOKEYS,
 	},
 	{
 		.name = "nomac",
 		.desc = "Don't generate MAC",
 		.type = OPTION_VALUE,
-		.opt.value = &pkcs12_config.maciter,
+		.opt = {
+			.value = &pkcs12_config.maciter,
+		},
 		.value = -1,
 	},
 	{
 		.name = "nomaciter",
 		.desc = "Don't use MAC iteration",
 		.type = OPTION_VALUE,
-		.opt.value = &pkcs12_config.maciter,
+		.opt = {
+			.value = &pkcs12_config.maciter,
+		},
 		.value = 1,
 	},
 	{
@@ -461,7 +485,9 @@ static const struct option pkcs12_option
 		.name = "noout",
 		.desc = "Don't output anything, just verify",
 		.type = OPTION_VALUE_OR,
-		.opt.value = &pkcs12_config.options,
+		.opt = {
+			.value = &pkcs12_config.options,
+		},
 		.value = (NOKEYS | NOCERTS),
 	},
 	{
diff -uprN -X mkfile apps.orig/openssl/s_time.c apps/openssl/s_time.c
--- apps.orig/openssl/s_time.c	Sun May 31 21:08:22 2020
+++ apps/openssl/s_time.c	Sun May 31 19:27:31 2020
@@ -175,7 +175,9 @@ static const struct option s_time_option
 		.name = "new",
 		.desc = "Use a new session ID for each connection",
 		.type = OPTION_VALUE,
-		.opt.value = &s_time_config.perform,
+		.opt = {
+			.value = &s_time_config.perform,
+		},
 		.value = 1,
 	},
 	{
@@ -188,7 +190,9 @@ static const struct option s_time_option
 		.name = "reuse",
 		.desc = "Reuse the same session ID for each connection",
 		.type = OPTION_VALUE,
-		.opt.value = &s_time_config.perform,
+		.opt = {
+			.value = &s_time_config.perform,
+		},
 		.value = 2,
 	},
 	{
diff -uprN -X mkfile apps.orig/openssl/x509.c apps/openssl/x509.c
--- apps.orig/openssl/x509.c	Sun May 31 21:08:22 2020
+++ apps/openssl/x509.c	Sun May 31 20:33:49 2020
@@ -65,6 +65,7 @@
 #include "apps.h"
 
 #include <openssl/asn1.h>
+#include <openssl/asn1t.h>
 #include <openssl/bio.h>
 #include <openssl/bn.h>
 #include <openssl/err.h>
@@ -776,7 +777,7 @@ x509_main(int argc, char **argv)
 			} else if (startdate == i) {
 				ASN1_TIME *nB = X509_get_notBefore(x);
 				BIO_puts(STDout, "notBefore=");
-				if (ASN1_time_parse(nB->data, nB->length, NULL, 0) == -1)
+				if (ASN1_time_parse((const char *)nB->data, nB->length, NULL, 0) == -1)
 					BIO_puts(STDout, "INVALID RFC5280 TIME");
 				else
 					ASN1_TIME_print(STDout, nB);
@@ -784,7 +785,7 @@ x509_main(int argc, char **argv)
 			} else if (enddate == i) {
 				ASN1_TIME *nA = X509_get_notAfter(x);
 				BIO_puts(STDout, "notAfter=");
-				if (ASN1_time_parse(nA->data, nA->length, NULL, 0) == -1)
+				if (ASN1_time_parse((const char *)nA->data, nA->length, NULL, 0) == -1)
 					BIO_puts(STDout, "INVALID RFC5280 TIME");
 				else
 					ASN1_TIME_print(STDout, nA);
