diff -uprN -X mkfile tls.orig/tls.c tls/tls.c
--- tls.orig/tls.c	Sun May 31 21:08:19 2020
+++ tls/tls.c	Sun May 31 19:32:31 2020
@@ -274,8 +274,10 @@ tls_configure(struct tls *ctx, struct tl
 int
 tls_cert_hash(X509 *cert, char **hash)
 {
-	char d[EVP_MAX_MD_SIZE], *dhex = NULL;
-	int dlen, rv = -1;
+	unsigned char d[EVP_MAX_MD_SIZE];
+	char *dhex = NULL;
+	int rv = -1;
+	unsigned int dlen;
 
 	free(*hash);
 	*hash = NULL;
@@ -301,8 +303,10 @@ tls_cert_hash(X509 *cert, char **hash)
 int
 tls_cert_pubkey_hash(X509 *cert, char **hash)
 {
-	char d[EVP_MAX_MD_SIZE], *dhex = NULL;
-	int dlen, rv = -1;
+	unsigned char d[EVP_MAX_MD_SIZE];
+	char *dhex = NULL;
+	int rv = -1;
+	unsigned int dlen;
 
 	free(*hash);
 	*hash = NULL;
@@ -428,7 +432,7 @@ tls_configure_ssl(struct tls *ctx, SSL_C
 		SSL_CTX_set_options(ssl_ctx, SSL_OP_NO_TLSv1_3);
 
 	if (ctx->config->alpn != NULL) {
-		if (SSL_CTX_set_alpn_protos(ssl_ctx, ctx->config->alpn,
+		if (SSL_CTX_set_alpn_protos(ssl_ctx, (unsigned char*)ctx->config->alpn,
 		    ctx->config->alpn_len) != 0) {
 			tls_set_errorx(ctx, "failed to set alpn");
 			goto err;
diff -uprN -X mkfile tls.orig/tls_conninfo.c tls/tls_conninfo.c
--- tls.orig/tls_conninfo.c	Sun May 31 21:08:19 2020
+++ tls/tls_conninfo.c	Sun May 31 19:32:31 2020
@@ -119,9 +119,9 @@ tls_get_peer_cert_times(struct tls *ctx,
 		goto err;
 	if ((after = X509_get_notAfter(ctx->ssl_peer_cert)) == NULL)
 		goto err;
-	if (ASN1_time_parse(before->data, before->length, &before_tm, 0) == -1)
+	if (ASN1_time_parse((char*)before->data, before->length, &before_tm, 0) == -1)
 		goto err;
-	if (ASN1_time_parse(after->data, after->length, &after_tm, 0) == -1)
+	if (ASN1_time_parse((char*)after->data, after->length, &after_tm, 0) == -1)
 		goto err;
 	if (!ASN1_time_tm_clamp_notafter(&after_tm))
 		goto err;
diff -uprN -X mkfile tls.orig/tls_ocsp.c tls/tls_ocsp.c
--- tls.orig/tls_ocsp.c	Sun May 31 21:08:19 2020
+++ tls/tls_ocsp.c	Sun May 31 19:32:31 2020
@@ -62,7 +62,7 @@ tls_ocsp_asn1_parse_time(struct tls *ctx
 	if (gt == NULL)
 		return -1;
 	/* RFC 6960 specifies that all times in OCSP must be GENERALIZEDTIME */
-	if (ASN1_time_parse(gt->data, gt->length, &tm,
+	if (ASN1_time_parse((char*)gt->data, gt->length, &tm,
 		V_ASN1_GENERALIZEDTIME) == -1)
 		return -1;
 	if ((*gt_time = timegm(&tm)) == -1)
diff -uprN -X mkfile tls.orig/tls_server.c tls/tls_server.c
--- tls.orig/tls_server.c	Sun May 31 21:08:19 2020
+++ tls/tls_server.c	Sun May 31 19:32:31 2020
@@ -69,7 +69,7 @@ tls_server_alpn_cb(SSL *ssl, const unsig
 	struct tls *ctx = arg;
 
 	if (SSL_select_next_proto((unsigned char**)out, outlen,
-	    ctx->config->alpn, ctx->config->alpn_len, in, inlen) ==
+	    (unsigned char*)ctx->config->alpn, ctx->config->alpn_len, in, inlen) ==
 	    OPENSSL_NPN_NEGOTIATED)
 		return (SSL_TLSEXT_ERR_OK);
 
diff -uprN -X mkfile tls.orig/tls_verify.c tls/tls_verify.c
--- tls.orig/tls_verify.c	Sun May 31 21:08:19 2020
+++ tls/tls_verify.c	Sun May 31 19:32:31 2020
@@ -134,7 +134,7 @@ tls_check_subject_altname(struct tls *ct
 				data = ASN1_STRING_data(altname->d.dNSName);
 				len = ASN1_STRING_length(altname->d.dNSName);
 
-				if (len < 0 || (size_t)len != strlen(data)) {
+				if (len < 0 || (size_t)len != strlen((char*)data)) {
 					tls_set_errorx(ctx,
 					    "error verifying name '%s': "
 					    "NUL byte in subjectAltName, "
@@ -149,7 +149,7 @@ tls_check_subject_altname(struct tls *ct
 				 * " " is a legal domain name, but that
 				 * dNSName must be rejected.
 				 */
-				if (strcmp(data, " ") == 0) {
+				if (strcmp((char*)data, " ") == 0) {
 					tls_set_errorx(ctx,
 					    "error verifying name '%s': "
 					    "a dNSName of \" \" must not be "
@@ -158,7 +158,7 @@ tls_check_subject_altname(struct tls *ct
 					break;
 				}
 
-				if (tls_match_name(data, name) == 0) {
+				if (tls_match_name((char*)data, name) == 0) {
 					*alt_match = 1;
 					break;
 				}
